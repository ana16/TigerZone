<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>558</x>
      <y>258</y>
      <w>282</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Tile
--
- edges: Node[]
- corners: Node[]
- hasDen: boolean
- preyAnimal: PreyAnimal
- location: Point
- tileSections : List&lt;TileSection&gt;
--
+ rotateClockwise(numberOfRotations: int) : void
+ addTileSections(TileSection... tileSections) : void
+ toString() : String
--
+ hasDen() : boolean
+ setHasDen(hasDen: boolean) : void
+ getEdge(location: EdgeLocation) : Node
+ setEdge(edgeNode: Node, location: EdgeLocation) : void
+ getCorner(location: CornerLocation) : Node
+ setConer(cornerNode: Node, location: CornerLocation) : void
+ getPreyAnimal() : PreyAnimal
+ setPreyAnimal(preyAnimal: PreyAnimal) : void
+ getLocation() : Point
+ setLocation(location: Point) : void
+ getTileSections() : List&lt;TileSection&gt;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1020</x>
      <y>354</y>
      <w>198</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>TileSection
--
- nodes: List&lt;Node&gt;
- terrain : Terrain
- tile: Tile
- tiger: Tiger
--
+ TileSection(terrain: Terrain)
--
+ addNodes(Node... node) : void
+ toString() : void
--
+ getTerrain() : Terrain
+ getTile() : Tile
+ setTile(tile: Tile) : void
+ getRegion() : Region
+ setRegion(region: Region) : void
+ getNodes() : List&lt;Node&gt;
+ getTiger() : Tiger
+ setTiger(tiger: Tiger) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>558</x>
      <y>498</y>
      <w>282</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>Region
--
- regionId : UUID
- tileSections : List&lt;TileSection&gt;
- terrain: Terrain
--
+ addTileSection(section : TileSection) : void
+ combineWithRegion(region: Region) : void
+ isFinished() : boolean
+ containsTigers() : boolean
+ getScorer() : Scorer  // Factory
--
+ getRegionId() : UUID
+ getTileSections() : List&lt;TileSection&gt; : void
+ getTerrain() : Terrain</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>834</x>
      <y>318</y>
      <w>198</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;240.0;10.0;240.0;70.0;310.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>834</x>
      <y>354</y>
      <w>156</w>
      <h>186</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;290.0;240.0;290.0;240.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6</x>
      <y>246</y>
      <w>414</w>
      <h>312</h>
    </coordinates>
    <panel_attributes>Board
--
- boardMatrix: Tile[][]
- openTileLocations: HashSet&lt;Point&gt;
- regions: Map&lt;UUID, Region&gt;
- tigerDens: List&lt;TigerDen&gt;
- lastTilePlaced: Tile
- placedTigers: Set&lt;Tiger&gt;
- boardSize: int
- numTiles: int
--
+ Board(numberOfTiles: int, firstTile: Tile)
--
+ place(tile: Tile, location: Point) : void throws
+ findValidTilePlacements(tile: Tile) : List&lt;LocationAndOrientation&gt; 
+ getTile(tileLocation: Point) : Tile
+ getNumTiles() : int
+ getOpenTileLocations() : HashSet&lt;Point&gt;
+ getLastPlacedTile() : Tile
+ toString() : String
+ getPossibleTileSectionTigerPlacements() : List&lt;TileSection&gt;
- lateralConnectionIsValid(rightTile: Tile, leftTile: Tile) : boolean
- connectLaterally(rightTile: Tile, leftTile: Tile) : void throws
- verticalConnectionIsValid(bottomTile: Tile, topTile: Tile) : boolean
- connectVertically(bottomTile: Tile, topTile: Tile) : void throws
- nodeConnectionIsValid(first: Node, second: Node) : boolean
- connectNodes(first: Node, second: Node) : void throws
- setTileAtLocation(tile: Tile, location: Point) : void
+ canPlaceTiger(section: TileSection) : boolean
+ log() : void throws
+ addPlacedTiger(tiger: Tiger) : void
+ removePlacedTiger(tiger: Tiger) : void
+ stackTiger(tigerToStack: Tiger) : void throws
+ regionsAsList() : List&lt;Region&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>414</x>
      <y>258</y>
      <w>156</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;240.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>414</x>
      <y>270</y>
      <w>156</w>
      <h>246</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0;100.0;390.0;240.0;390.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>984</x>
      <y>30</y>
      <w>108</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>&lt;&lt; enum &gt;&gt;
CornerLocation
--
TOP_LEFT
TOP_RIGHT
BOTTOM_LEFT
BOTTOM_RIGHT
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>858</x>
      <y>30</y>
      <w>108</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>&lt;&lt; enum &gt;&gt;
EdgeLocation
--
TOP
RIGHT
BOTTOM
LEFT
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>558</x>
      <y>654</y>
      <w>282</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>TigerDen
--
- centralTileLocation : Point
- tileLocationsRequired : Map&lt;Point, Boolean&gt;
- tiger: Tiger
--
+ TigerDen(centralPoint: Point, board: Board)
+ isComplete() : boolean
--
+ getCentralTileLocation() : Point
+ getRequiredTileLocations() : List&lt;Point&gt;
+ getTiger() : Tiger
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>414</x>
      <y>300</y>
      <w>156</w>
      <h>372</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0;80.0;600.0;240.0;600.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>24</x>
      <y>582</y>
      <w>306</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>notify all players about status of game (score, forfeits, tigers left)
advance turn
notify a player that its their turn
give them valid tile placements and orientations
give them all tiles in the stack
wait for tile placement (hand control to player controller)
game manager receives player's move
check for tiger placements
notify player of tiger placements
receive possible tiger placement
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>36</y>
      <w>450</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>AIManager
--
- moves: Map&lt;LocationAndOrientation, Integer&gt;
- lastGameStatusMessages: Stack&lt;GameStatusMessage&gt;
- gameInteractor: GameInteractor
- playerName: String
- playersInfo: Map&lt;String, PlayerInfo&gt;
--
+ AIManager(gameInteractor: GameInteractor, playerName: String)
--
+  getBestMove() : LocationAndOrientation
+ parseScoreForPossibleMove(locationAndOrientation: LocationAndOrientation, tile: Tile, player: Player) : void
+ clearMoves() : void
+ notifyGameStatus(GameStatusMessage gameStatusMessage) : void
+ startTurn(Tile tileToPlace, List&lt;LocationAndOrientation&gt; possibleLocations) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1020</x>
      <y>564</y>
      <w>198</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Node
--
- connectedNode: Node
- tileSection: TileSection
--
+ Node()
--
+ isTigerDisplayNode() : boolean
+ getTileSection() : TileSection
+ setTileSection(tileSection: TileSection) : void
+ getConnectedNode() : Node
+ setConnectedNode(node: Node) : void
+ isConnected() : boolean</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1212</x>
      <y>366</y>
      <w>84</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0;120.0;340.0;10.0;340.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>834</x>
      <y>276</y>
      <w>198</w>
      <h>306</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;10.0;140.0;490.0;310.0;490.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>612</x>
      <y>30</y>
      <w>108</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>&lt;&lt; enum &gt;&gt;
Terrain
--
LAKE
TRAIL
JUNGLE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>738</x>
      <y>42</y>
      <w>108</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>&lt;&lt; enum &gt;&gt;
PreyAnimal
--
DEER
BUFFALO
BOAR</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1020</x>
      <y>156</y>
      <w>222</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>Tiger
--
- owningPlayerName: String
- stacked: boolean
--
+ Tiger(owningPlayerName: String, stacked: boolean)
--
+ getOwningPlayerName() : String
+ isStacked() : boolean</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
